This is a doctest based regression suite for random_challenges.py
Each '>>' line is run as if in a python shell, and counts as a test.
The next line, if not '>>' is the expected output of the previous line.
If anything doesn't match exactly (including trailing spaces), the test fails.


>>> from random_challenges import is_palindorme, sort_only_natural_numbers, add_accumulated, build_square, count_substrings, count_appearances, sort_by_population, character_map


>>> is_palindorme('Reconocer')
True


>>> is_palindorme('Tania')
False


>>> sort_only_natural_numbers([6, 5, 4, -1, 3, 2, -1, 1])
[1, 2, 3, -1, 4, 5, -1, 6]


>>> sort_only_natural_numbers([])
[]


>>> sort_only_natural_numbers(None)
Traceback (most recent call last):
	...
TypeError: 'NoneType' object is not iterable


>>> add_accumulated(None)
Traceback (most recent call last):
	...
TypeError: 'NoneType' object is not iterable


>>> add_accumulated([])
[]


>>> add_accumulated([1, 0, 1, 0, 1])
[1, 1, 2, 2, 3]


>>> add_accumulated([1, 5, 7])
[1, 6, 13]


>>> build_square(None)
Traceback (most recent call last):
	...
TypeError: 'NoneType' object cannot be interpreted as an integer


>>> build_square(0)
array([], shape=(0, 0), dtype=int64)


>>> build_square(1)
array([[1]])


>>> build_square(3)
array([[3, 3, 3],
       [3, 3, 3],
       [3, 3, 3]])


>>> build_square(5)
array([[5, 5, 5, 5, 5],
       [5, 5, 5, 5, 5],
       [5, 5, 5, 5, 5],
       [5, 5, 5, 5, 5],
       [5, 5, 5, 5, 5]])


AAXOXXA
>>> count_substrings('aax0xxa')
6


>>> count_substrings('AxAxAXaxaX')
15


>>> count_substrings(None)
Traceback (most recent call last):
	...
AttributeError: 'NoneType' object has no attribute 'upper'


>>> count_appearances('abcdasdfacdjop')
{'a': 3, 'b': 1, 'c': 2, 'd': 3, 's': 1, 'f': 1, 'j': 1, 'o': 1, 'p': 1}


>>> sort_by_population({'Cuautitlán': 108000, 'C. México': 8800000, 'Zamora': 141000, 'Guadalupe': 673000})
['C. México', 'Guadalupe']


>>> character_map('zagzdaa')
[0, 1, 2, 0, 3, 1, 1]


>>> character_map(None)
Traceback (most recent call last):
       ...
TypeError: 'NoneType' object is not iterable
